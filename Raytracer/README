Raytracer C++ framework for "Introduction to Computer Graphics" 2015/2016
===============================================================

This is a C++ framework for a raytracer for the Computer Graphics course 2015/2016 
taught at the University of Groningen by Jiri Kosinka. It was originally created for 
the Computer Science course "Introduction to Computer Graphics" taught at the University 
of Groningen by Tobias Isenberg & Alex Telea.


Author: Maarten Everts

This framework is inspired by and uses code of the raytracer framework of 
Bert Freudenberg that can be found at
<http://isgwww.cs.uni-magdeburg.de/graphik/lehre/cg2/projekt/rtprojekt.html>


Description of the included files
---------------------------------

### The raytracer source files:

main.cpp
:	Contains main(), starting point. Responsible for parsing command-line
	arguments.
	
raytracer.cpp/.h
:	Raytracer class. Responsible for reading the scene description, starting
	the raytracer and writing the result to an image file.
	
scene.cpp/.h
:	Scene class. Contains code for the actual raytracing.
	
image.cpp/.h
:	Image class, includes code for reading from and writing to PNG files.
	
light.cpp/.h
:	Light class.

ray.h
:	Ray class.

hit.h
:	Hit class.

object.cpp/.h
:	Object class. Represents an object in the scene.

sphere.cpp/.h
:	Sphere class, which is a subclass of the Object class. Respresents a
	sphere in the scene.
	
triple.cpp/.h
:	Triple class. Represents a 3-dimensional vector which is used for colors,
	points,	and vectors. Includes a number of useful functions and operators,
	see the comments in triple.h.

### Supporting source files:

lodepng.cpp/.h
:	Code for reading from and writing to PNG files, used by the Image class.
	LodePNG is created by Lode Vandevenne and can be found at
	<http://members.gamedev.net/lode/projects/LodePNG/>.

yaml/*
:	Code for parsing YAML documents. Created by Jesse Beder, can be obtained 
	from <http://code.google.com/p/yaml-cpp/>. See also yaml/license.txt.

Modifications
: 	raytracer.cpp/.h 
		Method parseRenderMode was added in order to read that field and more objects 		were added to parseObject.
	scene.cpp/.h
		Attributes included:
			 A render mode attribute was added to select which one to use, alongside 			 with a min and max distance attributes.
		Methods included:
			->setMinMax: This method goes thru each and every pixel to obtain min and 				max distance before rendering z-buffer. 
			->parseRenderMode: Get rendermode from yaml file
			->setRenderMode: Set the render mode for the upcoming object rendering			->tracePhong: Contains algorithm to generate phong
			->traceZBuffer: Contains algorithm to generate zbuffer
			->traceNormalBuffer: Contains algorithm to generate normal buffer

	sphere.cpp/.h
		The intersect method was finished.
	
	The following classes were included:
	plane.cpp/.h
		Plane class, which is a subclass of the Object class. Represents an infinite 		plane in the scene. Can be constructed from the general form (point and 			normal) or from 3 points. Usage in the yaml files:
		- type: plane						
		  formula: [general or points]					 
  		  [point:, normal:] or [p1:, p2:, p3:]
		Note: the formula field is mandatory	

	triangle.cpp/.h
		Triangle class, which is a subclass of the Object class. Represents a 				triangle in the scene. It is constructed from its 3 vertices. Usage in the 			yaml files:	

		- type: triangle				 
  		  v1:
		  v2:
		  v3:
		
	cylinder.cpp/.h
		Cylinder class, which is a subclass of the Object class. Represents a 				finite cylinder in the scene. It is constructed from the center of its bottom 		cap, the center of its top cap and its radius. It can be constructed then in 		any position. Usage in the yaml files:
		
		- type: cylinder
		  p1: (bottom cap)
		  p2: (top cap)
		  r: (radius)

	renderMode.h
		Enum class to model the different types of render modes.		